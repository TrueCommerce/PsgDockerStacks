version: "3.5"

networks:
  proxy:
    name: "proxy"
  internal:
    name: "internal"

services: 

  # Shared Reverse Proxy
  reverse-proxy:
    image: "traefik:v2.2"
    restart: "always"
    networks:
      - "proxy"
    ports:
      - "443:443"
      - "80:80"
    command:
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=proxy"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.tcpsg.acme.tlschallenge=true"
      - "--certificatesresolvers.tcpsg.acme.email=${SSL_EMAIL}"
      - "--certificatesresolvers.tcpsg.acme.storage=/letsencrypt/acme.json"
    volumes:
      - "./shared/reverse-proxy/letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock"

  # Shared PostgreSQL Database
  postgresql:
    image: "postgres:11.8"
    restart: "always"
    networks:
      - "internal"
    volumes:
      - "./shared/postgresql/data:/var/lib/postgresql/data"
    environment:
      POSTGRES_USER: "fider"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"

  # DevOps NetSuite Sync - Dev
  devopsnetsuitesync-dev:
    image: "tcpsg.azurecr.io/devopsnetsuitesync:3.2.2"
    restart: "always"
    environment:
      AzureKeyVault__ClientSecret: "${DEVOPSSYNC_AZUREAD_CLIENTSECRET_DEV}"
      DOTNET_ENVIRONMENT: "Development"

  # DevOps NetSuite Sync - Prod
  devopsnetsuitesync-prod:
    image: "tcpsg.azurecr.io/devopsnetsuitesync:3.2.2"
    restart: "always"
    environment:
      AzureKeyVault__ClientSecret: "${DEVOPSSYNC_AZUREAD_CLIENTSECRET_PROD}"
      DOTNET_ENVIRONMENT: "Production"

  # Dynamic Forms - UAT
  dynamicforms-uat:
    image: "tcpsg.azurecr.io/dynamicforms:latest"
    restart: "always"
    networks:
      - "proxy"
    environment:
      AzureAd__ClientSecret: "${DYNAMICFORMS_AZUREAD_CLIENTSECRET_UAT}"
      AzureKeyVault__ClientSecret: "${DYNAMICFORMS_AZUREAD_CLIENTSECRET_UAT}"
      DOTNET_ENVIRONMENT: "Development"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dynamicforms-uat.rule=Host(`forms.uat.tcpsg.net`)"
      - "traefik.http.routers.dynamicforms-uat.entrypoints=websecure"
      - "traefik.http.routers.dynamicforms-uat.service=dynamicforms-uat"
      - "traefik.http.routers.dynamicforms-uat.tls.certresolver=tcpsg"
      - "traefik.http.services.dynamicforms-uat.loadbalancer.server.port=80"
      - "traefik.docker.network=proxy"

  # Fider
  fider:
    depends_on:
      - "postgresql"
    image: "getfider/fider:0.18.0"
    restart: "always"
    networks:
      - "proxy"
      - "internal"
    environment:
      GO_ENV: "production"
      DATABASE_URL: "postgres://fider:${POSTGRES_PASSWORD}@postgresql:5432/fider?sslmode=disable"
      JWT_SECRET: "${FIDER_JWT_SECRET}"
      EMAIL_NOREPLY: "noreply@tcpsg.net"
      EMAIL_SMTP_HOST: "${FIDER_SMTP_HOST}"
      EMAIL_SMTP_PORT: "${FIDER_SMTP_PORT}"
      EMAIL_SMTP_USERNAME: "${FIDER_SMTP_USERNAME}"
      EMAIL_SMTP_PASSWORD: "${FIDER_SMTP_PASSWORD}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.fider.rule=Host(`ideas.tcpsg.net`)"
      - "traefik.http.routers.fider.entrypoints=websecure"
      - "traefik.http.routers.fider.service=fider"
      - "traefik.http.routers.fider.tls.certresolver=tcpsg"
      - "traefik.http.services.fider.loadbalancer.server.port=3000"
      - "traefik.docker.network=proxy"
      
  # Mavenlink Assigned To Sync
  mavenlink-assignedtosync:
    image: "tcpsg.azurecr.io/mavenlink-assignedtosync:latest"
    restart: "always"
    environment:
      AzureKeyVault__ClientSecret: "${WORKERSERVICES_AZUREAD_CLIENTSECRET}"
      DOTNET_ENVIRONMENT: "Production"

  # NetSuite DataLake Ingestion
  datalake-prototype-netsuite:
    image: "tcpsg.azurecr.io/datalake-prototype-netsuite:1.1.0"
    restart: "always"
    environment:
      AzureKeyVault__ClientSecret: "${DATALAKE_AZUREAD_CLIENTSECRET}"
      DOTNET_ENVIRONMENT: "Production"
      PSGDataLake__Schedule: "0 */6 * * *"

  # Portainer
  portainer:
    image: "portainer/portainer"
    restart: "always"
    networks:
      - "proxy"
    volumes:
      - "./data/portainer:/data"
      - "/var/run/docker.sock:/var/run/docker.sock"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.rule=Host(`portainer.vm00.prod.eastus.tcpsg.net`)"
      - "traefik.http.routers.portainer.entrypoints=websecure"
      - "traefik.http.routers.portainer.service=portainer"
      - "traefik.http.routers.portainer.tls.certresolver=tcpsg"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
      - "traefik.docker.network=proxy"

  # PostOffice
  postoffice:
    image: "tcpsg.azurecr.io/postoffice:latest"
    restart: "always"
    networks:
      - "proxy"
    volumes:
      - "./data/postoffice:/app/data"
    environment:
      AzureAd__ClientSecret: "${POSTOFFICE_AZUREAD_CLIENTSECRET}"
      PostOffice__Infrastructure__SendGrid__ApiKey: "${POSTOFFICE_SENDGRID_APIKEY}"
      DOTNET_ENVIRONMENT: "Production"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.postoffice.rule=Host(`postoffice.tcpsg.net`)"
      - "traefik.http.routers.postoffice.entrypoints=websecure"
      - "traefik.http.routers.postoffice.service=postoffice"
      - "traefik.http.routers.postoffice.tls.certresolver=tcpsg"
      - "traefik.http.services.postoffice.loadbalancer.server.port=80"
      - "traefik.docker.network=proxy"

  # Seq Logging Server
  seq:
    image: "datalust/seq:5"
    restart: "always"
    networks:
      - "proxy"
    volumes:
      - "./data/seq:/data"
    environment:
      ACCEPT_EULA: "Y"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.seq.rule=Host(`seq.tcpsg.net`)"
      - "traefik.http.routers.seq.entrypoints=websecure"
      - "traefik.http.routers.seq.service=seq"
      - "traefik.http.routers.seq.tls.certresolver=tcpsg"
      - "traefik.http.services.seq.loadbalancer.server.port=80"
      - "traefik.docker.network=proxy"
